/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Daos;

import Dtos.User;
import Validation.Validation;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.mindrot.jbcrypt.BCrypt;

/**
 * Microhard - Paul Sweeney, Dean Farrelly and Gerard Hoey
 * 
 * The author of this class is Paul Sweeney
 */
public class UserDao extends Dao implements UserDaoInterface {

    /**
     * Constructor for creating a UserDao instance using the Dao superclass
     * 
     * @param databaseName Name of the database to connect to in the instance
     */
    public UserDao(String databaseName) {
        super(databaseName);
    }
    
    Validation em = new Validation();

    /**
     * Adds a User to the database.
     * 
     * Adds a User passed from the app to the database by inserting the user's data into the user table.
     * 
     * @param u The User that is to be entered into the database.
     * @return Returns an int which is the id of the new row inserted in the database
     */
    @Override
    public int addUser(User u) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int newId = -1;
        
        String hashedPassword = BCrypt.hashpw(u.getPassword(), BCrypt.gensalt());
        
        try {
            con = getConnection();
            // Make query
            String query = " INSERT INTO user (email, password, firstName, lastName, dateOfBirth, phoneNumber, addressLine1, addressLine2, cityOrTown, postalCode, county, country, privileges, suspended) "
                    + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
            // Compile into SQL
            ps = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            // Setting the name variable for the statement
            ps.setString(1, u.getEmail());
            ps.setString(2, hashedPassword);
            ps.setString(3, u.getFirstName());
            ps.setString(4, u.getLastName());
            ps.setDate(5, u.getDateOfBirth());
            ps.setString(6, u.getPhoneNumber());
            ps.setString(7, u.getAddressLine1());
            ps.setString(8, u.getAddressLine2());
            ps.setString(9, u.getCityOrTown());
            ps.setString(10, u.getPostalCode());
            ps.setString(11, u.getCounty());
            ps.setString(12, u.getCountry());
            ps.setInt(13, u.getPrivileges());
            ps.setInt(14, u.getSuspended());
            
            //Execute the SQL
            ps.executeUpdate();
            
            // Find out what the id generated for this entry was
            generatedKeys = ps.getGeneratedKeys();
            // If there was a result, i.e. if the entry was inserted successfully
            if(generatedKeys.next())
            {
                // Get the id value that was generated by MySQL when the entry was inserted
                newId = generatedKeys.getInt(1);
            }
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the addUser() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            newId = -1;
        } finally {
            if (generatedKeys != null) {
                try {
                    generatedKeys.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return newId;
    }

    /**
     * Disables a member.
     * 
     * This method allows an admin to disable a standard user by passing that user's id as an
     * argument.
     * 
     * @param id The id of the user that will be disabled.
     * @return An int containing the amount of rows affected in the table.
     */
    @Override
    public int disableMember(int id) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int rowsAffected = 0;
        
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET suspended = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setInt(1, User.DISABLED);
            ps.setInt(2, id);
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the disableMember() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }
    
    /**
     * Enables a member.
     * 
     * This method allows an admin to enable a standard user that is disabled by passing that user's id as an
     * argument.
     * 
     * @param id The id of the user that will be enabled.
     * @return An int containing the amount of rows affected in the table.
     */
    @Override
    public int enableMember(int id) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int rowsAffected = 0;
        
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET suspended = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setInt(1, User.ENABLED);
            ps.setInt(2, id);
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the disableMember() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }

    /**
     * Gets a user by their username and password.
     * 
     * In the app, when a user is logged in, their username and password is already
     * provided so this method allows the user's details to be stored for further use
     * in other methods.
     * 
     * @param email The username of the user.
     * @param password The password of the user.
     * @return The user that matches this username and password.
     */
    @Override
    public User getCurrentUser(String email, String password) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        // Required for data/result storage
        User u = null;
        
        try {
            con = getConnection();
            // Make query
            String query = " SELECT * FROM user "
                    + " WHERE email = ?";
            // Compile into SQL
            ps = con.prepareStatement(query);
            ps.setString(1, email);
            //Execute the SQL
            rs = ps.executeQuery();
            
            if(rs.next()){
                boolean passwordMatches = false;
                String passwordFromDatabase = rs.getString("password");
                if (BCrypt.checkpw(password, passwordFromDatabase))
                        passwordMatches = true;
                else
                        passwordMatches = false;
            
                if (passwordMatches) {
                    int userId = rs.getInt("id");
                    String email1 = rs.getString("email");
                    String firstName = rs.getString("firstName");
                    String lastName = rs.getString("lastName");
                    Date dateOfBirth = rs.getDate("dateOfBirth");
                    String phoneNumber = rs.getString("phoneNumber");
                    String addressLine1 = rs.getString("addressLine1");
                    String addressLine2 = rs.getString("addressLine2");
                    String cityOrTown = rs.getString("cityOrTown");
                    String postalCode = rs.getString("postalCode");
                    String county = rs.getString("county");
                    String country = rs.getString("country");
                    int privileges = rs.getInt("privileges");
                    int suspended = rs.getInt("suspended");

                    u = new User(userId, email, passwordFromDatabase, firstName, lastName, dateOfBirth, phoneNumber, addressLine1, addressLine2, cityOrTown, postalCode, county, country, privileges, suspended);
                } else {
                    u = null;
                }
            }
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the getCurrentUser() method\n" + ex.getMessage());
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with rs\n" + ex.getMessage());
                }
            }
            if (ps != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return u;
    }

    /**
     * Gets a user by their username.
     * 
     * Gets a user by their username by finding the user that matches this username
     * in the database.
     * 
     * @param username The username of the user.
     * @return The user that matches this username.
     */
    @Override
    public User getUserByUsername(String username) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        // Required for data/result storage
        User u = new User();
        
        try {
            con = getConnection();
            // Make query
            String query = "SELECT * FROM user "
                    + " WHERE userId = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            ps.setString(1, username);
            //Execute the SQL
            rs = ps.executeQuery();
            //     public Order(int orderNumber, Date orderDate, Date requiredDate, Date shippedDate, String status, String comments, int customerNumber)
            while(rs.next()) {
                u.setUserId(rs.getInt("user_id"));
                u.setEmail(rs.getString("email"));
                u.setPassword(rs.getString("password"));
                u.setFirstName(rs.getString("firstName"));
                u.setLastName(rs.getString("lastName"));
                u.setDateOfBirth(rs.getDate("dateOfBirth"));
                u.setPhoneNumber(rs.getString("phoneNumber"));
                u.setAddressLine1(rs.getString("addressLine1"));
                u.setAddressLine2(rs.getString("addressLine2"));
                u.setCityOrTown(rs.getString("cityOrTown"));
                u.setPostalCode(rs.getString("postalCode"));
                u.setCounty(rs.getString("county"));
                u.setCountry(rs.getString("country"));
                u.setPrivileges(rs.getInt("privileges"));
                u.setSuspended(rs.getInt("suspended"));
            }
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the getUserByUsername() method\n" + ex.getMessage());
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with rs\n" + ex.getMessage());
                }
            }
            if (ps != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return u;
    }
    
    /**
     * Gets a user by their id.
     * 
     * Gets a user by their id by finding the user that matches this id
     * in the database.
     * 
     * @param userId The username of the user.
     * @return The user that matches this id.
     */
    @Override
    public User getUserById(int userId) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        // Required for data/result storage
        User u = new User();
        
        try {
            con = getConnection();
            // Make query
            String query = "SELECT * FROM user "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            ps.setInt(1, userId);
            //Execute the SQL
            rs = ps.executeQuery();
            //     public Order(int orderNumber, Date orderDate, Date requiredDate, Date shippedDate, String status, String comments, int customerNumber)
            while(rs.next()) {
                u.setUserId(rs.getInt("id"));
                u.setEmail(rs.getString("email"));
                u.setPassword(rs.getString("password"));
                u.setFirstName(rs.getString("firstName"));
                u.setLastName(rs.getString("lastName"));
                u.setDateOfBirth(rs.getDate("dateOfBirth"));
                u.setPhoneNumber(rs.getString("phoneNumber"));
                u.setAddressLine1(rs.getString("addressLine1"));
                u.setAddressLine2(rs.getString("addressLine2"));
                u.setCityOrTown(rs.getString("cityOrTown"));
                u.setPostalCode(rs.getString("postalCode"));
                u.setCounty(rs.getString("county"));
                u.setCountry(rs.getString("country"));
                u.setPrivileges(rs.getInt("privileges"));
                u.setSuspended(rs.getInt("suspended"));
            }
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the getUserById() method\n" + ex.getMessage());
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with rs\n" + ex.getMessage());
                }
            }
            if (ps != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return u;
    }
    
    /**
     * Removes a user by their id.
     * 
     * Removes a user by passing their id as an argument and removing the
     * user that has that id in the database.
     * 
     * @param userId The userId of the user.
     * @return An int containing how many rows in the database were affected. Should
     * contain 1 if a row was removed, and 0 if not.
     */
    @Override
    public int removeUserById(int userId)
    {
        Connection con = null;
        PreparedStatement ps = null;
        int rowsAffected = 0;
      
        try {
            con = this.getConnection();

            String query = "DELETE FROM user WHERE id = ?";
            ps = con.prepareStatement(query);
            ps.setInt(1, userId);

            rowsAffected = ps.executeUpdate();
        } 
        catch (SQLException e) 
        {
            System.err.println("A problem occurred during the removeUserById() method:");
            System.err.println("\t"+e.getMessage());
            rowsAffected = 0;
        } 
        finally 
        {
            try 
            {
                if (ps != null) 
                {
                    ps.close();
                }
                if (con != null) 
                {
                    freeConnection(con);
                }
            } 
            catch (SQLException e) 
            {
                System.err.println("A problem occured when closing down the removeUserById() method:\n" + e.getMessage());
            }
        }
        return rowsAffected;
    }
    
    /**
     * Updates a User's Email.
     * 
     * If the information entered by the user to update there email
     * is correct then the email is updated and if not an error is displayed.
     * 
     * @param userId The id of the user.
     * @param email The username of the user.
     * 
     * @return An int containing how many rows in the database were affected. Should
     * contain 1 if a row was removed, and 0 if not.
     */
    @Override
    public int updateUserEmail(int userId, String email) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        
        int rowsAffected = -1;
        
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET email = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setString(1, ""+email+"");
            ps.setInt(2, userId);
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the updateUserEmail() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = -1;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }
    
     /**
     * Updates a User's Phone Number.
     * 
     * If the information entered by the user to update there phone number
     * is correct then the phone number is updated and if not an error is displayed.
     * 
     * @param user The user being passed through.
     * @param addressLine1 The username of the user.
     * 
     * @return An int containing how many rows in the database were affected. Should
     * contain 1 if a row was removed, and 0 if not.
     */
    @Override
    public int updateUserAddressLine1(User user, String addressLine1) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int rowsAffected = 0;
        
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET addressLine1 = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setString(1, addressLine1);
            ps.setInt(2, user.getUserId());
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the updateUserAddressLine1() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }
    
     /**
     * Updates a User's Phone Number.
     * 
     * If the information entered by the user to update there phone number
     * is correct then the phone number is updated and if not an error is displayed.
     * 
     * @param user The user being passed through.
     * @param phoneNumber The username of the user.
     * 
     * @return An int containing how many rows in the database were affected. Should
     * contain 1 if a row was removed, and 0 if not.
     */
    @Override
    public int updateUserPhone(User user, String phoneNumber) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int rowsAffected = 0;
        
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET phoneNumber = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setString(1, phoneNumber);
            ps.setInt(2, user.getUserId());
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the updateUserPhone() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }
    
    @Override
    public User getUserByEmail(String email) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        // Required for data/result storage
        User u = new User();
        
        try {
            con = getConnection();
            // Make query
            String query = "SELECT * FROM user "
                    + " WHERE email = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            ps.setString(1, email);
            //Execute the SQL
            rs = ps.executeQuery();
            //     public Order(int orderNumber, Date orderDate, Date requiredDate, Date shippedDate, String status, String comments, int customerNumber)
            while(rs.next()) {
                u.setUserId(rs.getInt("id"));
                u.setEmail(rs.getString("email"));
                u.setPassword(rs.getString("password"));
                u.setFirstName(rs.getString("firstName"));
                u.setLastName(rs.getString("lastName"));
                u.setDateOfBirth(rs.getDate("dateOfBirth"));
                u.setPhoneNumber(rs.getString("phoneNumber"));
                u.setAddressLine1(rs.getString("addressLine1"));
                u.setAddressLine2(rs.getString("addressLine2"));
                u.setCityOrTown(rs.getString("cityOrTown"));
                u.setPostalCode(rs.getString("postalCode"));
                u.setCounty(rs.getString("county"));
                u.setCountry(rs.getString("country"));
                u.setPrivileges(rs.getInt("privileges"));
                u.setSuspended(rs.getInt("suspended"));
            }
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the getUserByEmail() method\n" + ex.getMessage());
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with rs\n" + ex.getMessage());
                }
            }
            if (ps != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return u;
    }

    @Override
    public int updateUserAddressLine2(User user, String addressLine2) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int rowsAffected = 0;
        
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET addressLine2 = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setString(1, addressLine2);
            ps.setInt(2, user.getUserId());
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the updateUserAddressLine1() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }

    @Override
    public int updateCityOrTown(User user, String cityOrTown) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int rowsAffected = 0;
        
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET cityOrTown = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setString(1, cityOrTown);
            ps.setInt(2, user.getUserId());
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the updateUserAddressLine1() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }

    @Override
    public int updatePostalCode(User user, String postalCode) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int rowsAffected = 0;
        
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET postalCode = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setString(1, postalCode);
            ps.setInt(2, user.getUserId());
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the updateUserAddressLine1() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }

    @Override
    public int updateCounty(User user, String county) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int rowsAffected = 0;
        
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET county = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setString(1, county);
            ps.setInt(2, user.getUserId());
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the updateUserAddressLine1() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }

    @Override
    public int updateCountry(User user, String country) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int rowsAffected = 0;
        
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET country = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setString(1, country);
            ps.setInt(2, user.getUserId());
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the updateUserAddressLine1() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }

    @Override
    public int updateFirstName(User user, String firstName) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int rowsAffected = 0;
        
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET firstName = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setString(1, firstName);
            ps.setInt(2, user.getUserId());
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the updateUserAddressLine1() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }

    @Override
    public int updateLastName(User user, String lastName) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int rowsAffected = 0;
        
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET lastName = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setString(1, lastName);
            ps.setInt(2, user.getUserId());
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the updateUserAddressLine1() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }

    @Override
    public int updateUserPassword(User user, String password) {
        // Required for DB interation
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        
        int rowsAffected = 0;
        String hashedPassword = BCrypt.hashpw(password, BCrypt.gensalt());
        try {
            con = getConnection();
            // Make query
            String query = " UPDATE user "
                    + " SET password = ? "
                    + " WHERE id = ? ";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Setting the name variable for the statement
            ps.setString(1, hashedPassword);
            ps.setInt(2, user.getUserId());
            //Execute the SQL
            rowsAffected = ps.executeUpdate();
            
        } catch(SQLException ex) {
            System.out.println("An exception occured when querying the users table in the updateUserAddressLine1() method\n" + ex.getMessage());
            System.out.println("\t"+ex.getMessage());
            rowsAffected = 0;
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with ps\n" + ex.getMessage());
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    System.out.println("SQL Exception with con\n" + ex.getMessage());
                }
            }
        }
        
        return rowsAffected;
    }

    @Override
    public ArrayList<User> getUsers() {
        // DB interaction
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        // ArrayList to store results
        ArrayList<User> users = new ArrayList();

        try {
            con = getConnection();
            // Query
            String query = "SELECT * FROM user";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // Execute SQL
            rs = ps.executeQuery();

            // While loop through rows returned from query
            while (rs.next()) {
                int id = rs.getInt("id");
                String email = rs.getString("email");
                String password = rs.getString("password");
                String firstName =rs.getString("firstName");
                String lastName = rs.getString("lastName");
                Date dateOfBirth = rs.getDate("dateOfBirth");
                String phoneNumber = rs.getString("phoneNumber");
                String addressLine1 = rs.getString("addressLine1");
                String addressLine2 = rs.getString("addressLine2");
                String cityOrTown = rs.getString("cityOrTown");
                String postalCode = rs.getString("postalCode");
                String county = rs.getString("county");
                String country = rs.getString("country");
                int privileges = rs.getInt("privileges");
                int suspended = rs.getInt("suspended");

                User u = new User(id, email, password, firstName, lastName, dateOfBirth, phoneNumber, addressLine1, addressLine2, cityOrTown, postalCode, county, country, privileges, suspended);

                // Store each book in the ArrayList
                users.add(u);
            }
        } catch (SQLException ex) {
            System.out.println("An exception occurred while querying the user table in the getUsers() method\n"
                    + ex.getMessage());
        } // Close open components
        finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                    Logger.getLogger(FlightDao.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException ex) {
                    Logger.getLogger(FlightDao.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (con != null) {
                freeConnection(con);
            }
        }
        // Return results
        return users;
    }
}
